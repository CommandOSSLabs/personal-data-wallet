version: '3.8'

services:
  # PostgreSQL Database with production settings
  postgres:
    image: postgres:16-alpine
    container_name: pdw-chat-postgres-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-pdw_chat_demo}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "5432:5432"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-pdw_chat_demo}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - pdw-prod-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Backend API with production optimizations
  backend:
    build:
      context: ../../../
      dockerfile: packages/pdw-sdk/examples/pdw-chat-demo/Dockerfile
      target: runner
    container_name: pdw-chat-backend-prod
    environment:
      NODE_ENV: production
      PORT: 4000
      DATABASE_URL: postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-pdw_chat_demo}?sslmode=require
      DATABASE_SSL: true
      SUI_RPC_URL: ${SUI_RPC_URL}
      PDW_PACKAGE_ID: ${PDW_PACKAGE_ID}
      PDW_ACCESS_REGISTRY_ID: ${PDW_ACCESS_REGISTRY_ID}
      PDW_API_URL: ${PDW_API_URL}
      PDW_CONTEXT_APP_ID: ${PDW_CONTEXT_APP_ID:-pdw-chat-demo}
      PDW_CONSENT_STORAGE_PATH: /app/storage/consents/requests.json
      WALRUS_UPLOAD_RELAY: ${WALRUS_UPLOAD_RELAY}
      WALRUS_STORAGE_EPOCHS: ${WALRUS_STORAGE_EPOCHS:-3}
      WALRUS_STORAGE_TIMEOUT: ${WALRUS_STORAGE_TIMEOUT:-60000}
      SEAL_KEY_SERVER_IDS: ${SEAL_KEY_SERVER_IDS}
      SEAL_PACKAGE_ID: ${SEAL_PACKAGE_ID}
      SEAL_MODULE_NAME: ${SEAL_MODULE_NAME:-seal_access_control}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      GEMINI_MODEL: ${GEMINI_MODEL:-gemini-2.5-flash}
      GEMINI_EMBEDDING_MODEL: ${GEMINI_EMBEDDING_MODEL:-text-embedding-004}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      SKIP_BLOCKCHAIN_OPERATIONS: ${SKIP_BLOCKCHAIN_OPERATIONS:-false}
      SKIP_ENCRYPTION: ${SKIP_ENCRYPTION:-false}
    ports:
      - "4000:4000"
    volumes:
      - backend_prod_storage:/app/storage
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - pdw-prod-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # Frontend Application with production build
  frontend:
    build:
      context: ../../../
      dockerfile: packages/pdw-sdk/examples/pdw-chat-demo/frontend/Dockerfile
      target: runner
    container_name: pdw-chat-frontend-prod
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_PDW_BACKEND_URL: ${NEXT_PUBLIC_PDW_BACKEND_URL}
    ports:
      - "3000:3000"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - pdw-prod-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: pdw-chat-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - pdw-prod-network
    restart: always

volumes:
  postgres_prod_data:
    driver: local
  backend_prod_storage:
    driver: local

networks:
  pdw-prod-network:
    driver: bridge